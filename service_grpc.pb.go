// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: service.proto

package accessibility_bridge_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ActionManager_ScreenDump_FullMethodName        = "/service.accessibility.bridge.ActionManager/ScreenDump"
	ActionManager_PerformSwipe_FullMethodName      = "/service.accessibility.bridge.ActionManager/PerformSwipe"
	ActionManager_PerformMultiTouch_FullMethodName = "/service.accessibility.bridge.ActionManager/PerformMultiTouch"
	ActionManager_PerformClick_FullMethodName      = "/service.accessibility.bridge.ActionManager/PerformClick"
	ActionManager_TypeText_FullMethodName          = "/service.accessibility.bridge.ActionManager/TypeText"
	ActionManager_PerformAction_FullMethodName     = "/service.accessibility.bridge.ActionManager/PerformAction"
)

// ActionManagerClient is the client API for ActionManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionManagerClient interface {
	ScreenDump(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ScreenView, error)
	PerformSwipe(ctx context.Context, in *ActionSwipe, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PerformMultiTouch(ctx context.Context, in *ActionMultiTouch, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PerformClick(ctx context.Context, in *ActionClick, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TypeText(ctx context.Context, in *ActionTypeText, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PerformAction(ctx context.Context, in *ActionKey, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type actionManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewActionManagerClient(cc grpc.ClientConnInterface) ActionManagerClient {
	return &actionManagerClient{cc}
}

func (c *actionManagerClient) ScreenDump(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ScreenView, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScreenView)
	err := c.cc.Invoke(ctx, ActionManager_ScreenDump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionManagerClient) PerformSwipe(ctx context.Context, in *ActionSwipe, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActionManager_PerformSwipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionManagerClient) PerformMultiTouch(ctx context.Context, in *ActionMultiTouch, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActionManager_PerformMultiTouch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionManagerClient) PerformClick(ctx context.Context, in *ActionClick, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActionManager_PerformClick_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionManagerClient) TypeText(ctx context.Context, in *ActionTypeText, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActionManager_TypeText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionManagerClient) PerformAction(ctx context.Context, in *ActionKey, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ActionManager_PerformAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionManagerServer is the server API for ActionManager service.
// All implementations must embed UnimplementedActionManagerServer
// for forward compatibility.
type ActionManagerServer interface {
	ScreenDump(context.Context, *emptypb.Empty) (*ScreenView, error)
	PerformSwipe(context.Context, *ActionSwipe) (*emptypb.Empty, error)
	PerformMultiTouch(context.Context, *ActionMultiTouch) (*emptypb.Empty, error)
	PerformClick(context.Context, *ActionClick) (*emptypb.Empty, error)
	TypeText(context.Context, *ActionTypeText) (*emptypb.Empty, error)
	PerformAction(context.Context, *ActionKey) (*emptypb.Empty, error)
	mustEmbedUnimplementedActionManagerServer()
}

// UnimplementedActionManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActionManagerServer struct{}

func (UnimplementedActionManagerServer) ScreenDump(context.Context, *emptypb.Empty) (*ScreenView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScreenDump not implemented")
}
func (UnimplementedActionManagerServer) PerformSwipe(context.Context, *ActionSwipe) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformSwipe not implemented")
}
func (UnimplementedActionManagerServer) PerformMultiTouch(context.Context, *ActionMultiTouch) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformMultiTouch not implemented")
}
func (UnimplementedActionManagerServer) PerformClick(context.Context, *ActionClick) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformClick not implemented")
}
func (UnimplementedActionManagerServer) TypeText(context.Context, *ActionTypeText) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TypeText not implemented")
}
func (UnimplementedActionManagerServer) PerformAction(context.Context, *ActionKey) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformAction not implemented")
}
func (UnimplementedActionManagerServer) mustEmbedUnimplementedActionManagerServer() {}
func (UnimplementedActionManagerServer) testEmbeddedByValue()                       {}

// UnsafeActionManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionManagerServer will
// result in compilation errors.
type UnsafeActionManagerServer interface {
	mustEmbedUnimplementedActionManagerServer()
}

func RegisterActionManagerServer(s grpc.ServiceRegistrar, srv ActionManagerServer) {
	// If the following call pancis, it indicates UnimplementedActionManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ActionManager_ServiceDesc, srv)
}

func _ActionManager_ScreenDump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionManagerServer).ScreenDump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionManager_ScreenDump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionManagerServer).ScreenDump(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionManager_PerformSwipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionSwipe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionManagerServer).PerformSwipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionManager_PerformSwipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionManagerServer).PerformSwipe(ctx, req.(*ActionSwipe))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionManager_PerformMultiTouch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionMultiTouch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionManagerServer).PerformMultiTouch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionManager_PerformMultiTouch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionManagerServer).PerformMultiTouch(ctx, req.(*ActionMultiTouch))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionManager_PerformClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionClick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionManagerServer).PerformClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionManager_PerformClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionManagerServer).PerformClick(ctx, req.(*ActionClick))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionManager_TypeText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionTypeText)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionManagerServer).TypeText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionManager_TypeText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionManagerServer).TypeText(ctx, req.(*ActionTypeText))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActionManager_PerformAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionManagerServer).PerformAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionManager_PerformAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionManagerServer).PerformAction(ctx, req.(*ActionKey))
	}
	return interceptor(ctx, in, info, handler)
}

// ActionManager_ServiceDesc is the grpc.ServiceDesc for ActionManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.accessibility.bridge.ActionManager",
	HandlerType: (*ActionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScreenDump",
			Handler:    _ActionManager_ScreenDump_Handler,
		},
		{
			MethodName: "PerformSwipe",
			Handler:    _ActionManager_PerformSwipe_Handler,
		},
		{
			MethodName: "PerformMultiTouch",
			Handler:    _ActionManager_PerformMultiTouch_Handler,
		},
		{
			MethodName: "PerformClick",
			Handler:    _ActionManager_PerformClick_Handler,
		},
		{
			MethodName: "TypeText",
			Handler:    _ActionManager_TypeText_Handler,
		},
		{
			MethodName: "PerformAction",
			Handler:    _ActionManager_PerformAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
